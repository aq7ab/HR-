
@{
    Layout = null;
    Models.Roles qq = ViewBag.quan;
}

<!DOCTYPE html>



<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>编辑角色</title>
    <link rel="stylesheet"
          href="../../css/table.css" type="text/css" />
    <script type="text/javascript" src="../../javascript/jquery-1.7.2.js"></script>
    <script type="text/javascript"
            src="../../javascript/jquery.messager.js"></script>
    <script type="text/javascript" src="../../javascript/user_add.js"></script>
    <script src="~/Scripts/vue/dist/vue.js"></script>
    <script src="~/Scripts/element-ui/lib/index.js"></script>
    <link href="~/Scripts/element-ui/lib/theme-chalk/index.css" rel="stylesheet" />
    <script src="~/Scripts/axios/dist/axios.js"></script>
    <style>
        #sf{
            width:160px
        }
    </style>
</head>
<body>
    <div id="app">
        <form>
            <table width="100%">
                <tr>
                    <td>

                        <el-breadcrumb separator="/" style="font-size:16px;margin-top:27px">
                            <el-breadcrumb-item :to="{ path: '/' }">人力资源</el-breadcrumb-item>
                            <el-breadcrumb-item><a href="#">权限管理</a></el-breadcrumb-item>
                            <el-breadcrumb-item>编辑角色</el-breadcrumb-item>
                        </el-breadcrumb>
                    </td>
                </tr>
                <tr>
                    <td align="right">
                        <input type="button" value="保存" v-on:click="tj" class="BUTTON_STYLE1" />
                        <input type="button" value="返回" class="BUTTON_STYLE1"
                               onclick="history.back()">
                    </td>
                </tr>
            </table>
            <table width="100%" border="1" cellpadding=3 cellspacing=1
                   bordercolorlight=#848284 bordercolordark=#eeeeee
                   class="TABLE_STYLE1">
                <tr>
                    <td class="TD_STYLE1">角色编号</td>
                    <td class="TD_STYLE2">
                        {{bh}}
                    </td>
                    <td class="TD_STYLE1">角色名称</td>
                    <td class="TD_STYLE2">
                        <el-input type="text" v-model="name" id="userName" name="users.userName" style="width:160px" />
                    </td>

                </tr>
                <tr>
                    <td class="TD_STYLE1">角色说明</td>
                    <td class="TD_STYLE2">
                        <el-input type="text" v-model="pwd" id="userPassword" name="users.userPassword" style="width:160px" />
                    </td>
                    <td class="TD_STYLE1">角色是否可用</td>
                    <td class="TD_STYLE2">
                        <el-select v-model="sf" id="sf">
                            <el-option v-for="item in options1"
                                       :key="item.value"
                                       :label="item.label"
                                       :value="item.value">
                            </el-option>

                        </el-select>
                    </td>

                </tr>
            </table>
        </form>
        <el-tree ref="tree"
                 show-checkbox
                 :data="treeData"
                 :props="treeProps"
                 node-key="Id"
                 :default-expand-all="true"
                 :default-checked-keys="defualtkeys"></el-tree>
    </div>
</body>
</html>
<script type="text/javascript">
    var vm = new Vue({
        el: "#app",
        data: {
            sf: "",
            name: "",
            bh:"",
            options1: [{
                value: '是',
                label: '是'
            }, {
                value: '否',
                label: '否'
            },],
            pwd: "",
            treeData: [],
            treeProps: {
                label: "authName",
                children: "children"
            },
            defualtkeys: [],
        },
        methods: {
            fill() {
                this.bh =@Html.Raw(Json.Encode(qq.RolesID));
                this.name =@Html.Raw(Json.Encode(qq.RolesName));
                this.pwd =@Html.Raw(Json.Encode(qq.RolesInstruction));
                this.sf =@Html.Raw(Json.Encode(qq.RolesIf));
            },
           
            //查询 权限/角色权限 
            doLoadTreeNodes: function () {
                var t = this;
                axios.all([this.getTree(), this.getQuan()])
                    .then(axios.spread(function (acct, perms) {
                        t.treeData = acct.data;
                        t.defualtkeys = perms.data;
                    }));
            },
            //权限
            getTree: function () {
                return axios.get('/Power/Jurisdiction_find')
            },
            //角色权限
            getQuan: function () {
                return axios.get('/Power/Jurisdiction_ID', {
                    params: {
                        roleID: this.bh
                    }
                })
            },
            //保存
            tj() {
                var name = document.getElementById("userName").value;
                var pwd = document.getElementById("userPassword").value;

                if (name.length <= 0) {
                    alert("角色名称不可为空!!!");
                    return;
                }
                if (pwd.length <= 0) {
                    alert("角色说明不可为空!!!");
                    return;
                }
                axios.get('/Power/UpdateJS', {
                    params: {
                        RolesName: name,
                        RolesInstruction: pwd,
                        RolesIf: this.sf,
                        RolesID: this.bh
                        
                    }
                })
                    .then(res => {
                       

                    }).catch(err => {
                        console.log(err);
                    })
                var getKeys = [
                    ...this.$refs.tree.getCheckedKeys(),
                    ...this.$refs.tree.getHalfCheckedKeys()
                ];
                for (let i = 0; i < getKeys.length; i++) {
                    let value = getKeys[i];
                    axios.get('/Power/UpdateJS1', {
                        params: {
                            rid: this.bh,
                            pid: value
                        }
                    })
                        .then(res => {
                            

                        }).catch(err => {
                            console.log(err);
                        })
                }
                alert("编辑成功！");
                location.href = '/Power/Right_list'
                
            },

        },
        mounted: function () {
            this.fill();
            this.doLoadTreeNodes();
        },

    })
</script>
