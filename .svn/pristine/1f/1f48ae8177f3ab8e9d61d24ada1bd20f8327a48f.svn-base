using Dapper;
using Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DAO
{
    public class HumanFileDao
    {
        string str = "Data Source=.;Initial Catalog=HR_DB;Integrated Security=True";
        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="hm"></param>
        /// <returns></returns>
        public async Task<int> HFInsertAsync(HumanFile hm)
        {
            using(SqlConnection con = new SqlConnection(str))
            {
                string sql = $"select major_kind_name from [dbo].[config_major_kind] where [major_kind_id]='{hm.human_major_kind_id}'";
                string cc = con.QueryFirstOrDefault<string>(sql);
                string sql1 = $"select major_name from [dbo].[config_major] where [major_kind_id]='{hm.human_major_kind_id}' and [major_id]='{hm.human_major_id}'";
                string cc1 = con.QueryFirstOrDefault<string>(sql1);
                string yi = $"select [first_kind_name] from [dbo].[config_file_first_kind] where [first_kind_id]='{hm.first_kind_id}'";
                string yij = con.QueryFirstOrDefault<string>(yi);

                string er = $@"select second_kind_name from [dbo].[config_file_second_kind] where[second_kind_id]='{hm.second_kind_id}'";
                string erj = "";
                try
                {
                    erj = con.QueryFirstOrDefault<string>(er);
                }
                catch (Exception e)
                {
                    erj = "NULL";
                }

                string san = $@"select [third_kind_name] from [dbo].[config_file_third_kind] where [third_kind_id]='{hm.third_kind_id}'";
                string sanj = "";
                try
                {
                    sanj = con.QueryFirstOrDefault<string>(san);
                }
                catch (Exception e)
                {
                    sanj ="NULL";
                }
                string ccc = $@"select attribute_name from config_public_char where attribute_kind = '职称' and attribute_name = '{hm.human_pro_designation}'";
                string ccd = await con.QueryFirstAsync<string>(ccc);

                string sq = $@"SELECT RIGHT(CONCAT('000000',FLOOR(RAND()* 1000000)),6)";
                string sj = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString();
                string bh = "HYN" + sj + await con.QueryFirstAsync<string>(sq);

                string sql5 = $@"insert into [dbo].[human_file](human_id, first_kind_id, first_kind_name, 
                second_kind_id, second_kind_name, third_kind_id, third_kind_name, human_name, 
                human_address, human_postcode, human_pro_designation, human_major_kind_id, 
                human_major_kind_name, human_major_id, hunma_major_name, human_telephone, 
                human_mobilephone, human_bank, human_account, human_qq, human_email, human_hobby, 
                human_speciality, human_sex, human_religion, human_party, human_nationality, human_race, 
                human_birthday, human_birthplace, human_age, human_educated_degree, human_educated_years,
                human_educated_major, human_society_security_id, human_id_card, remark, 
                salary_standard_id, salary_standard_name, salary_sum, demand_salaray_sum, paid_salary_sum,
                major_change_amount, bonus_amount, training_amount, file_chang_amount, 
                human_histroy_records, human_family_membership, human_picture, attachment_name, 
                 register,regist_time
                ) values('{bh}',
                '{hm.first_kind_id}','{yij}','{hm.second_kind_id}','{erj}',
                '{hm.third_kind_id}','{sanj}',
                '{hm.human_name}','{hm.human_address}','{hm.human_postcode}','{ccd}','{hm.human_major_kind_id}',
                '{cc}','{hm.human_major_id}','{cc1}','{hm.human_telephone}',
                '{hm.human_mobilephone}','{hm.human_bank}','{hm.human_account}','{hm.human_qq}',
                '{hm.human_email}','{hm.human_hobby}','{hm.human_speciality}','{hm.human_sex}',
                '{hm.human_religion}','{hm.human_party}','{hm.human_nationality}','{hm.human_race}',
                '{hm.human_birthday}','{hm.human_birthplace}','{hm.human_age}','{hm.human_educated_degree}',
                '{hm.human_educated_years}','{hm.human_educated_major}','{hm.human_society_security_id}',
                '{hm.human_id_card}','{hm.remark}','{hm.salary_standard_id}','{hm.salary_standard_name}',
                '{hm.salary_sum}','{hm.demand_salaray_sum}','{hm.salary_sum}','{hm.major_change_amount}',
                '{hm.bonus_amount}','{hm.training_amount}','{hm.file_chang_amount}','{hm.human_histroy_records}',
                '{hm.human_family_membership}','{hm.human_picture}','{hm.attachment_name}',
                '{hm.register}','{hm.regist_time}')";
                return await con.ExecuteAsync(sql5);
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="hm"></param>
        /// <returns></returns>
        public async Task<int> HFUpdateAsync(HumanFile hm)
        {
            using (SqlConnection con = new SqlConnection(str))
            {
                
                string ccc = $@"select attribute_name from config_public_char where attribute_kind = '职称' and attribute_name = '{hm.human_pro_designation}'";
                string ccd = await con.QueryFirstAsync<string>(ccc);
                string sql5 = $@"update [dbo].[human_file]set   human_name='{hm.human_name}', human_address='{hm.human_address}', human_postcode='{hm.human_postcode}', human_pro_designation='{ccd}', human_telephone='{hm.human_telephone}', human_mobilephone='{hm.human_mobilephone}', human_bank='{hm.human_bank}', human_account='{hm.human_account}', human_qq='{hm.human_qq}', human_email='{hm.human_email}', human_hobby='{hm.human_hobby}', human_speciality='{hm.human_speciality}', human_sex='{hm.human_sex}', human_religion='{hm.human_religion}', human_party='{hm.human_party}', human_nationality='{hm.human_nationality}', human_race='{hm.human_race}', human_birthday='{hm.human_birthday}', human_birthplace='{hm.human_birthplace}', human_age='{hm.human_age}', human_educated_degree='{hm.human_educated_degree}', human_educated_years='{hm.human_educated_years}', human_educated_major='{hm.human_educated_major}', human_society_security_id='{hm.human_society_security_id}', human_id_card='{hm.human_id_card}', remark='{hm.remark}', salary_standard_id='{hm.salary_standard_id}', salary_standard_name='{hm.salary_standard_name}', salary_sum='{hm.salary_sum}', demand_salaray_sum='{hm.demand_salaray_sum}', paid_salary_sum='{hm.salary_sum}',  human_histroy_records='{hm.human_histroy_records}', human_family_membership='{hm.human_family_membership}',  attachment_name='{hm.attachment_name}', check_status=1,checker='{hm.checker}',check_time='{hm.check_time}'where  human_id='{hm.human_id}'";
                return await con.ExecuteAsync(sql5);
            }
        }
        public async Task<string> BhAsync()
        {
            using (SqlConnection connection = new SqlConnection(str))
            {
                string sql = $@"SELECT RIGHT(CONCAT('000000',FLOOR(RAND()* 1000000)),6)";
                string sj = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString();
                string bh = "HYN" + sj + await connection.QueryFirstAsync<string>(sql);
                return bh;
            }
        }
        public async Task<string> HFCount()
        {
            using(SqlConnection con = new SqlConnection(str))
            {
                string sql = "select COUNT(0) from human_file where [check_status] is null";
                return await con.QueryFirstAsync<string>(sql);
            }
        }
        public async Task<FenYe<HumanFile>> HFSelectAsync(FenYe<HumanFile> hf,string tj)
        {
            using (SqlConnection con = new SqlConnection(str))
            {
                DynamicParameters dd = new DynamicParameters();
                dd.Add("@pageSize", hf.PageSize);
                dd.Add("@keyName", "huf_id");
                dd.Add("@tableName", "human_file");
                dd.Add("@currentPage", hf.CurrentPage);
                dd.Add("@where", tj);
                dd.Add("@row", direction: ParameterDirection.Output, dbType: DbType.Int32);
                string sql = "exec [dbo].[FenYe] @pageSize, @keyName, @tableName, @currentPage, @where, @row out";
                hf.List = await con.QueryAsync<HumanFile>(sql, dd);
                hf.Rows = dd.Get<int>("row");
                return hf;
            }
        }
        public async Task<int> EMRUpdateAsync(EngageMajorRelease ee)
        {
            using (SqlConnection con = new SqlConnection(str))
            {
                string sql = $@"update engage_major_release set first_kind_name = '{ee.first_kind_name}',
                    second_kind_name = '{ee.second_kind_name}',third_kind_name = '{ee.third_kind_name}',
major_kind_name = '{ee.major_kind_name}',major_name = '{ee.major_name}',engage_type = '{ee.engage_type}',human_amount = '{ee.human_amount}',deadline = '{ee.deadline}',
register = '{ee.register}',regist_time = '{ee.regist_time}',major_describe = '{ee.major_describe}',engage_required = '{ee.engage_required}' where mre_id = '{ee.mre_id}'";
                return await con.ExecuteAsync(sql);
            }
        }

        public async Task<int> EMRDeleteAsync(int id)
        {
            using (SqlConnection con = new SqlConnection(str))
            {
                string sql = $@"delete from engage_major_release where mre_id = '{id}'";
                return await con.ExecuteAsync(sql);
            }
        }
        public async Task<IEnumerable<Lian>> GetFindAsync()
        {
            using (SqlConnection con = new SqlConnection(str))
            {
                string sql = $"select * from [dbo].[config_file_first_kind]";
                IEnumerable<CFFK> first_Cascaders = await con.QueryAsync<CFFK>(sql);
                List<Lian> fir = new List<Lian>();
                foreach (CFFK item in first_Cascaders)
                {

                    Lian cf = new Lian()
                    {
                        value = item.First_kind_id,
                        label = item.First_kind_name,
                        children = await Cha(item.First_kind_id),
                    };
                    fir.Add(cf);
                }
                return fir;
            }



        }

        public async Task<IEnumerable<Lian>> Cha(string id)
        {
            using (SqlConnection con = new SqlConnection(str))
            {
                string sql = $"select [second_kind_id],[second_kind_name] from [dbo].[config_file_second_kind] where [first_kind_id]='{id}'";
                IEnumerable<CFSK> first_Cascaders = await con.QueryAsync<CFSK>(sql);
                List<Lian> fir = new List<Lian>();
                foreach (CFSK item in first_Cascaders)
                {

                    Lian cf = new Lian()
                    {
                        value = item.Second_kind_id,
                        label = item.Second_kind_name,
                        children = await Cha1(item.Second_kind_id),
                    };
                    fir.Add(cf);
                }
                return fir;
            }

        }

        public async Task<IEnumerable<Lian>> Cha1(string id)
        {
            using (SqlConnection con = new SqlConnection(str))
            {
                string sql = $"select [third_kind_id],[third_kind_name] from [dbo].[config_file_third_kind] where [second_kind_id]='{id}'";
                IEnumerable<CFTK> first_Cascaders = await con.QueryAsync<CFTK>(sql);
                List<Lian> fir = new List<Lian>();
                foreach (CFTK item in first_Cascaders)
                {

                    Lian cf = new Lian()
                    {
                        value = item.Third_kind_id,
                        label = item.Third_kind_name,

                    };
                    fir.Add(cf);
                }
                return fir;
            }

        }



        public async Task<HumanFile> Jia(string bh)
        {
            using (SqlConnection con = new SqlConnection(str))
            {
                string sql = $"select * from [dbo].[human_file] where [human_id]='{bh}'";
                return await con.QueryFirstAsync<HumanFile>(sql);
            }
            }
    }
}
