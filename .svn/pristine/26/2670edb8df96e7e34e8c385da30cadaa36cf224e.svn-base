using Dapper;
using Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DAO
{
    public class UserDAO
    {
        string conStr = "Data Source=.;Initial Catalog=HR_DB;Integrated Security=True";
        /// <summary>
        /// 登录
        /// </summary>
        /// <returns></returns>
        public async Task<User> LoginAsync(User user)
        {
            using (SqlConnection connection = new SqlConnection(conStr))
            {
                string sql = $@"select * from [dbo].[users] where [u_name]='{user.U_name}' and [u_password]='{user.U_password}'";
                try
                {
                    return await connection.QueryFirstAsync<User>(sql);
                }
                catch (Exception e)
                {
                    return null;
                }

               
            }
        }
        /// <summary>
        /// 查询全部
        /// </summary>
        /// <returns></returns>
        public async Task<List<User>> SelectAsync()
        {
            using (SqlConnection connection = new SqlConnection(conStr))
            {
                string sql = "SELECT * FROM [dbo].[users]";
                return (List<User>)await connection.QueryAsync<User>(sql);
            }
        }

        /// <summary>
        /// 用户下拉框
        /// </summary>
        /// <returns></returns>
        public async Task<List<Roles>> XiaSelectAsync()
        {
            using (SqlConnection connection = new SqlConnection(conStr))
            {
                string sql = "select * from [dbo].[Roles]";
                return (List<Roles>)await connection.QueryAsync<Roles>(sql);
            }
        }

        /// <summary>
        /// 根据ID查全部
        /// </summary>
        /// <returns></returns>
        public async Task<RolesView> SelectIDAsync(int id)
        {
            using (SqlConnection connection = new SqlConnection(conStr))
            {
                string sql = $"select* from[dbo].[RolesView] where[UserRolesID]='{id}'";
                return await connection.QueryFirstAsync<RolesView>(sql);
            }
        }

        /// <summary>
        /// 根据ID查角色全部
        /// </summary>
        /// <returns></returns>
        public async Task<Roles> SelectIDJSAsync(int id)
        {
            using (SqlConnection connection = new SqlConnection(conStr))
            {
                string sql = $"select* from[dbo].[Roles] where[RolesID]='{id}'";
                return await connection.QueryFirstAsync<Roles>(sql);
            }
        }

        /// <summary>
        /// 查询用户管理分页
        /// </summary>
        /// <param name="fc"></param>
        /// <returns></returns>
        public async Task<FenYe<RolesView>> UserSelectAsync(FenYe<RolesView> fc, string tj)
        {
            using (SqlConnection con = new SqlConnection(conStr))
            {
                DynamicParameters dd = new DynamicParameters();
                dd.Add("@pageSize", fc.PageSize);
                dd.Add("@keyName", "UserRolesID");
                dd.Add("@tableName", "RolesView");
                dd.Add("@currentPage", fc.CurrentPage);
                dd.Add("where", tj);
                dd.Add("@row", direction: ParameterDirection.Output, dbType: DbType.Int32);
                string sql = "exec [dbo].[FenYe] @pageSize, @keyName, @tableName, @currentPage,@where, @row out";
                fc.List = await con.QueryAsync<RolesView>(sql, dd);
                fc.Rows = dd.Get<int>("row");
                return fc;
            }
        }

        /// <summary>
        /// 查询角色管理分页
        /// </summary>
        /// <param name="fc"></param>
        /// <returns></returns>
        public async Task<FenYe<Roles>> UserSelectJSAsync(FenYe<Roles> fc, string tj)
        {
            using (SqlConnection con = new SqlConnection(conStr))
            {
                DynamicParameters dd = new DynamicParameters();
                dd.Add("@pageSize", fc.PageSize);
                dd.Add("@keyName", "RolesID");
                dd.Add("@tableName", "Roles");
                dd.Add("@currentPage", fc.CurrentPage);
                dd.Add("where", tj);
                dd.Add("@row", direction: ParameterDirection.Output, dbType: DbType.Int32);
                string sql = "exec [dbo].[FenYe] @pageSize, @keyName, @tableName, @currentPage,@where, @row out";
                fc.List = await con.QueryAsync<Roles>(sql, dd);
                fc.Rows = dd.Get<int>("row");
                return fc;
            }
        }
        /// <summary>
        /// 添加用户
        /// </summary>
        /// <param name="rr"></param>
        /// <returns></returns>
        public async Task<int> InsertAsync(RolesView rr)
        {
            using (SqlConnection connection = new SqlConnection(conStr))
            {
                string id = $@"select max(u_id)+1 from [dbo].[users]";
                string user =await connection.QueryFirstAsync<string>(id);
                string sql = $@"insert into [dbo].[users](u_name, u_true_name, u_password)values('{rr.u_name}','{rr.u_true_name}','{rr.u_password}')";
                string ss = $@"insert into [dbo].[UserRoles](UserID, RolesID)values('{user}','{rr.RolesID}')";
               await connection.ExecuteAsync(ss);
                return await connection.ExecuteAsync(sql);
            }
        }

        /// <summary>
        /// 添加角色
        /// </summary>
        /// <param name="rr"></param>
        /// <returns></returns>
        public async Task<int> InsertJSAsync(Roles rr)
        {
            using (SqlConnection connection = new SqlConnection(conStr))
            {
                
                string sql = $@"insert into [dbo].[Roles](RolesName, RolesInstruction, RolesIf)values('{rr.RolesName}','{rr.RolesInstruction}','{rr.RolesIf}')";
               
                return await connection.ExecuteAsync(sql);
            }
        }

        /// <summary>
        /// 修改用户
        /// </summary>
        /// <param name="rr"></param>
        /// <returns></returns>
        public async Task<int> UpdateAsync(RolesView rr)
        {
            using (SqlConnection connection = new SqlConnection(conStr))
            {
                
                string sql = $@"update [dbo].[users] set  u_name='{rr.u_name}', u_true_name='{rr.u_true_name}', u_password='{rr.u_password}' where u_id='{rr.u_id}'";
                string ss = $@"update [dbo].[UserRoles] set [RolesID]='{rr.RolesID}'where [UserRolesID]='{rr.UserRolesID}'";
                await connection.ExecuteAsync(ss);
                return await connection.ExecuteAsync(sql);
            }
        }

        /// <summary>
        /// 删除用户
        /// </summary>
        /// <param name="rr"></param>
        /// <returns></returns>
        public async Task<int> DeleteAsync(int uid,int rid)
        {
            using (SqlConnection connection = new SqlConnection(conStr))
            {
                string sql = $@"delete from [dbo].[UserRoles] where [UserRolesID]='{rid}'";
                string ss = $@"delete from [dbo].[users] where [u_id]='{uid}'";
                await connection.ExecuteAsync(ss);
                return await connection.ExecuteAsync(sql);
            }
        }
    }
}
